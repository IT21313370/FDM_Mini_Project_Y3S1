[{"D:\\C.School\\Y3S1\\FDM\\Mini Project\\GitHub\\FDM_Mini_Project_Y3S1\\HR_Analytics_Web_App\\react-frontend\\src\\index.js":"1","D:\\C.School\\Y3S1\\FDM\\Mini Project\\GitHub\\FDM_Mini_Project_Y3S1\\HR_Analytics_Web_App\\react-frontend\\src\\reportWebVitals.js":"2","D:\\C.School\\Y3S1\\FDM\\Mini Project\\GitHub\\FDM_Mini_Project_Y3S1\\HR_Analytics_Web_App\\react-frontend\\src\\App.js":"3","D:\\C.School\\Y3S1\\FDM\\Mini Project\\GitHub\\FDM_Mini_Project_Y3S1\\HR_Analytics_Web_App\\react-frontend\\src\\Main.js":"4"},{"size":535,"mtime":1696780566758,"results":"5","hashOfConfig":"6"},{"size":362,"mtime":1696780566966,"results":"7","hashOfConfig":"6"},{"size":947,"mtime":1696796369957,"results":"8","hashOfConfig":"6"},{"size":10334,"mtime":1696822132415,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1phowxq",{"filePath":"13","messages":"14","suppressedMessages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},"D:\\C.School\\Y3S1\\FDM\\Mini Project\\GitHub\\FDM_Mini_Project_Y3S1\\HR_Analytics_Web_App\\react-frontend\\src\\index.js",[],[],"D:\\C.School\\Y3S1\\FDM\\Mini Project\\GitHub\\FDM_Mini_Project_Y3S1\\HR_Analytics_Web_App\\react-frontend\\src\\reportWebVitals.js",[],[],"D:\\C.School\\Y3S1\\FDM\\Mini Project\\GitHub\\FDM_Mini_Project_Y3S1\\HR_Analytics_Web_App\\react-frontend\\src\\App.js",[],[],"D:\\C.School\\Y3S1\\FDM\\Mini Project\\GitHub\\FDM_Mini_Project_Y3S1\\HR_Analytics_Web_App\\react-frontend\\src\\Main.js",["23"],[],"import React, { useState, useEffect } from 'react';\r\nimport LightModeOutlinedIcon from '@mui/icons-material/LightModeOutlined';\r\nimport DarkModeOutlinedIcon from '@mui/icons-material/DarkModeOutlined';\r\nimport Groups2Icon from '@mui/icons-material/Groups2';\r\nimport TrendingUpIcon from '@mui/icons-material/TrendingUp';\r\nimport HailIcon from '@mui/icons-material/Hail';\r\nimport DirectionsWalkIcon from '@mui/icons-material/DirectionsWalk';\r\nimport businessLogo2 from './assets/businessLogo2.png';\r\nimport businessLogo1 from './assets/businesssLogo1.png';\r\nimport Swal from 'sweetalert2';\r\n\r\nexport default function Main({ isLightMode, toggleMode }) {\r\n  const [count, setCount] = useState(0);\r\n  const [submitted, setSubmitted] = useState(false);\r\n  const [onesCount, setOnesCount] = useState(0); // Initialize onesCount\r\n  const [zerosCount, setZerosCount] = useState(0); // Initialize zerosCount\r\n\r\n  const updateCount = (newCount) => {\r\n    setCount(newCount);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <NavBar isLightMode={isLightMode} toggleMode={toggleMode} />\r\n      <About\r\n        count={count}\r\n        updateCount={updateCount}\r\n        submitted={submitted}\r\n        onesCount={onesCount} \r\n        zerosCount={zerosCount}\r\n        setSubmitted={setSubmitted}\r\n        setOnesCount={setOnesCount} // Pass setOnesCount\r\n        setZerosCount={setZerosCount} // Pass setZerosCount\r\n      />\r\n      {/* <Indicators count={count} onesCount={onesCount} zerosCount={zerosCount} /> */}\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n// ... Rest of the code remains the same\r\n\r\n\r\n// ... Rest of the code remains the same\r\n\r\n\r\nfunction NavBar({ isLightMode, toggleMode }) {\r\n  return (\r\n    <div className={`NavBar ${isLightMode ? 'light-mode' : 'dark-mode'}`} id='NavBar'>\r\n      <div className='navbar_1'>\r\n        {isLightMode ? (\r\n          <img src={businessLogo2} alt='logo' />\r\n        ) : (\r\n          <img src={businessLogo1} alt='logo' />\r\n        )}\r\n        <span className='app-name'>HR Analytics Dashboard</span>\r\n      </div>\r\n      <div className='navbar-2'>\r\n        <ul>\r\n          <li>\r\n            {isLightMode ? (\r\n              <DarkModeOutlinedIcon onClick={toggleMode} />\r\n            ) : (\r\n              <LightModeOutlinedIcon onClick={toggleMode} />\r\n            )}\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction About({ count, updateCount, submitted, setSubmitted, setOnesCount, setZerosCount, onesCount, zerosCount }) {\r\n  return (\r\n    <div className='Area' id='About'>\r\n      <Indicators count={count} onesCount={onesCount} zerosCount={zerosCount} />\r\n      <Forms\r\n        updateCount={updateCount}\r\n        submitted={submitted}\r\n        setSubmitted={setSubmitted}\r\n        setOnesCount={setOnesCount} // Pass setOnesCount\r\n        setZerosCount={setZerosCount} // Pass setZerosCount\r\n      />\r\n      <footer className='footer'>\r\n        copyright &copy; 2023 All Rights Reserved\r\n      </footer>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nfunction Indicators({ count, onesCount, zerosCount }) {\r\n  return (\r\n    <div className='sub_area_01'>\r\n      <div className='indicator_cards'>\r\n        <div className='card' id='card_01'>\r\n          <span className='card_name'>Total Headcount</span>\r\n          <div className='card-desc'>\r\n            <div className='card_icon'><Groups2Icon /></div>\r\n            <span className='card_count'>{count}</span>\r\n          </div>\r\n        </div>\r\n        <div className='card' id='card_02'>\r\n          <span className='card_name'>Model Accuracy</span>\r\n          <div className='card-desc'>\r\n            <div className='card_icon'><TrendingUpIcon /></div>\r\n            <span className='card_count'>76%</span>\r\n          </div>\r\n        </div>\r\n        <div className='card' id='card_03'>\r\n          <span className='card_name'>Stay Count</span>\r\n          <div className='card-desc'>\r\n            <div className='card_icon'><HailIcon /></div>\r\n            <span className='card_count'>{zerosCount}</span>\r\n          </div>\r\n        </div>\r\n        <div className='card' id='card_04'>\r\n          <span className='card_name'>Leave Count</span>\r\n          <div className='card-desc'>\r\n            <div className='card_icon'><DirectionsWalkIcon /></div>\r\n            <span className='card_count'>{onesCount}</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Forms({ updateCount, submitted, setSubmitted,   setOnesCount, setZerosCount }) {\r\n  const [data, setData] = useState({});\r\n\r\n  const [formData, setFormData] = useState({\r\n    city_development_index: '',\r\n    relevent_experience: '',\r\n    education_level: '',\r\n    total_experience: '',\r\n    last_new_job_gap: '',\r\n  });\r\n\r\n  const handleInputChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setFormData({\r\n      ...formData,\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    Swal.fire({\r\n      position: 'center',\r\n      icon: 'success',\r\n      title: 'Submission Successful',\r\n      showConfirmButton: false,\r\n      timer: 2000,\r\n    });\r\n    setSubmitted(true);\r\n    updateCount((prevCount) => prevCount + 1);\r\n    // const predictionValue = data.prediction >= 0.5 ? 1 : 0;\r\n    // if (predictionValue === 0) {\r\n    //   setZerosCount((prevCount) => prevCount + 1); // Increase Stay Count\r\n    //   // setZerosCount((prevCount) => prevCount);\r\n    // } else {\r\n    //   setOnesCount((prevCount) => prevCount + 1); // Increase Leave Count\r\n    //   // setOnesCount((prevCount) => prevCount);\r\n    // }\r\n    fetchData()\r\n  };\r\n\r\n  const handleClear = () => {\r\n    setFormData({\r\n      city_development_index: '',\r\n      relevent_experience: '',\r\n      education_level: '',\r\n      total_experience: '',\r\n      last_new_job_gap: '',\r\n    });\r\n    setData({});\r\n    setSubmitted(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (submitted) {\r\n      fetchData();\r\n    }\r\n  }, [submitted]);\r\n\r\n  const fetchData = async () => {\r\n    try {\r\n      const url = `http://localhost:5000/predict?city_development_index=${formData.city_development_index}&relevent_experience=${formData.relevent_experience}&education_level=${formData.education_level}&total_experience=${formData.total_experience}&last_new_job_gap=${formData.last_new_job_gap}`;\r\n\r\n      const response = await fetch(url);\r\n      if (response.ok) {\r\n        const jsonData = await response.json();\r\n        setData(jsonData);\r\n\r\n        // Update onesCount and zerosCount based on the prediction\r\n        if (jsonData.prediction >= 0.5) {\r\n          setOnesCount((prevCount) => prevCount + 1); // Increase Leave Count\r\n        } else {\r\n          setZerosCount((prevCount) => prevCount + 1); // Increase Stay Count\r\n        }\r\n      } else {\r\n        console.error('Failed to fetch data');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className='sub_area_02'>\r\n      <div className='form_body'>\r\n        <form action='/predict' method='GET' onSubmit={handleSubmit}>\r\n          <label htmlFor='city_development_index'>City Development Index</label>\r\n          <input\r\n            type='number'\r\n            step='0.01'\r\n            name='city_development_index'\r\n            value={formData.city_development_index}\r\n            onChange={handleInputChange}\r\n            placeholder='ex: 1.42'\r\n            required\r\n          /><br /><br />\r\n\r\n          <label htmlFor='relevent_experience'>Relevant Experience <span className='label_desc'>(Yes/No)</span></label>\r\n          <select\r\n            name='relevent_experience'\r\n            value={formData.relevent_experience}\r\n            onChange={handleInputChange}\r\n            required\r\n          >\r\n            <option value='Yes'>Yes</option>\r\n            <option value='No'>No</option>\r\n          </select><br /><br />\r\n\r\n          <label htmlFor='education_level'>Education Level</label>\r\n          <select\r\n            name='education_level'\r\n            value={formData.education_level}\r\n            onChange={handleInputChange}\r\n            required\r\n          >\r\n            <option value='graduate'>Graduate</option>\r\n            <option value='masters'>Masters</option>\r\n            <option value='high_school'>High School</option>\r\n            <option value='phd'>PhD</option>\r\n            <option value='primary_school'>Primary School</option>\r\n          </select><br /><br />\r\n\r\n          <label htmlFor='total_experience'>Total Experience <span className='label_desc'>(Years)</span></label>\r\n          <input\r\n            type='number'\r\n            name='total_experience'\r\n            value={formData.total_experience}\r\n            onChange={handleInputChange}\r\n            placeholder='ex: 2'\r\n            required\r\n          /><br /><br />\r\n\r\n          <label htmlFor='last_new_job_gap'>Last New Job Gap <span className='label_desc'>(Years)</span></label>\r\n          <input\r\n            type='number'\r\n            name='last_new_job_gap'\r\n            value={formData.last_new_job_gap}\r\n            onChange={handleInputChange}\r\n            placeholder='ex: 3'\r\n            required\r\n          /><br /><br />\r\n          <div className='button-container'>\r\n            <button type='submit'>Predict</button>\r\n            <button\r\n            type='button'\r\n            onClick={handleClear}\r\n              style={{\r\n                background: 'white',\r\n                color: 'black',\r\n                transition: 'background 0.3s',\r\n                border: '1px solid grey',\r\n              }}\r\n            >\r\n              Clear\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n      <div className='result_body'>\r\n        <div className='box_body'>\r\n          <div className='result_box'>\r\n            <span className='box_name'>Result</span><br />\r\n            {submitted && (\r\n              <span className='box_result' id='result_status_box' >{data.prediction >= 0.5 ? '0' : '1'}</span>\r\n            )}\r\n          </div>\r\n          <div className='result_box'>\r\n            <span className='box_name'>Status</span><br />\r\n            {submitted && (\r\n              <span className='box_result' style={{ color: data.prediction >= 0.5 ? 'red' : '#16FF00' }}>{data.prediction >= 0.5 ? 'Exit' : 'Stay'}</span>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}",{"ruleId":"24","severity":1,"message":"25","line":186,"column":6,"nodeType":"26","endLine":186,"endColumn":17,"suggestions":"27"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.","ArrayExpression",["28"],{"desc":"29","fix":"30"},"Update the dependencies array to be: [fetchData, submitted]",{"range":"31","text":"32"},[5905,5916],"[fetchData, submitted]"]